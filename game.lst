ca65 V2.17 - Git d52d986
Main file   : src/game.s
Current file: src/game.s

000000r 1               ;; assembler config
000000r 1               .setcpu "6502"
000000r 1               
000000r 1               ;; defines
000000r 1               .include "ppu.s"
000000r 2               ;; PPU (Picture Processing Unit) registers. https://wiki.nesdev.com/w/index.php/PPU_registers
000000r 2               PPUCTRL		= $2000
000000r 2               PPUMASK		= $2001
000000r 2               PPUSTATUS	= $2002
000000r 2               OAMADDR		= $2003
000000r 2               OAMDATA		= $2004
000000r 2               PPUSCROLL	= $2005
000000r 2               PPUADDR		= $2006
000000r 2               PPUDATA		= $2007
000000r 2               
000000r 1               .include "io.s"
000000r 2               ;; Other IO registers.
000000r 2               OAMDMA		= $4014
000000r 2               APUSTATUS	= $4015
000000r 2               JOYPAD1		= $4016
000000r 2               JOYPAD2		= $4017
000000r 2               
000000r 1               
000000r 1               
000000r 1               ;; iNES header
000000r 1               .include "header.s"
000000r 2               ;; iNES HEADER FOR GENERAL INFORMATION ABOUT THE CARTRIDGE (16 Byte)
000000r 2               ;; NROM-128 with 16 KB PRG ROM and 8 KB CHR ROM
000000r 2               .segment "INES"
000000r 2  4E 45 53 1A          .byte $4E, $45, $53, $1A	; 0-3 ("NES^Z")
000004r 2  01                   .byte $1					; 4	(num of 16 KB PRG ROM banks)
000005r 2  01                   .byte $1					; 5 (num of  8 KB CHR ROM banks)
000006r 2  01                   .byte $1					; 6 (flags) (mirroring: 0: horizontal, 1: vertical)
000007r 2  01                   .byte $1					; 7 (flags)
000008r 2  01           		.byte $1					; 8 (num of 8 KB PRG RAM banks)
000009r 2  00           		.byte $0					; 9 (flags) (TV SYSTEM: 0: NTSC, 1: PAL)
00000Ar 2  00           		.byte $0					; 10 (must be zero)
00000Br 2  00           		.byte $0					; 11 (must be zero)
00000Cr 2  00           		.byte $0					; 12 (must be zero)
00000Dr 2  00           		.byte $0					; 13 (must be zero)
00000Er 2  00           		.byte $0					; 14 (must be zero)
00000Fr 2  00           		.byte $0					; 15 (must be zero)
000010r 2               
000010r 1               
000010r 1               
000010r 1               ;; PRG CODE START
000010r 1               .segment "CODE"
000000r 1               
000000r 1               
000000r 1               	;; FUNCTION TO HANDLE A RESET INTERRUPT
000000r 1               	.proc reset
000000r 1               		;; general reset
000000r 1  78           		sei					; set interrupt flag to 1 to disable interrupts (second bit in status register)
000001r 1  D8           		cld					; set decimal flag to 0 to disable decimal mode (third bit in status register)
000002r 1  A2 FF        		ldx #$FF			; 0xFF in X-register
000004r 1  9A           		txs					; write X-register in stack-pointer (init stack with 0xFF because stack grows to the ground)
000005r 1  E8           		inx					; increment X-register to get  0x00
000006r 1  8E 00 20     		stx	PPUCTRL			; store x in PPUCTRL   (set to 0x00)
000009r 1               		;; wait for PPU to warmup
000009r 1  2C 02 20     	:	bit PPUSTATUS
00000Cr 1  10 FB        		bpl :-
00000Er 1  2C 02 20     	:	bit PPUSTATUS
000011r 1  10 FB        		bpl :-
000013r 1               		;; zero ram
000013r 1  8A           		txa
000014r 1  95 00        	:	sta $000, x
000016r 1  9D 00 01     		sta $100, x
000019r 1  9D 00 02     		sta $200, x
00001Cr 1  9D 00 03     		sta $300, x
00001Fr 1  9D 00 04     		sta $400, x
000022r 1  9D 00 05     		sta $500, x
000025r 1  9D 00 06     		sta $600, x
000028r 1  9D 00 07     		sta $700, x
00002Br 1  E8           		inx
00002Cr 1  D0 E6        		bne :-
00002Er 1               		;; final wait for PPU to warmup
00002Er 1  2C 02 20     	:	bit PPUSTATUS
000031r 1  10 FB        		bpl :-
000033r 1               		;; play audio tone forever
000033r 1  A9 01        		lda #$01
000035r 1  8D 15 40     		sta APUSTATUS
000038r 1  A9 08        		lda #$08
00003Ar 1  8D 02 40     		sta $4002
00003Dr 1  A9 02        		lda #$02
00003Fr 1  8D 03 40     		sta $4003
000042r 1  A9 BF        		lda #$BF
000044r 1  8D 00 40     		sta $4000
000047r 1               		;; endless loop
000047r 1  4C rr rr     	:	jmp :-
00004Ar 1               	.endproc
00004Ar 1               
00004Ar 1               
00004Ar 1               	;; FUNCTION TO HANDLE A NMI INTERRUPT
00004Ar 1               	.proc nmi
00004Ar 1  40           		rti
00004Br 1               	.endproc
00004Br 1               
00004Br 1               
00004Br 1               	;; FUNCTION TO HANDLE A IRQ INTERRUPT
00004Br 1               	.proc irq
00004Br 1  40           		rti
00004Cr 1               	.endproc
00004Cr 1               
00004Cr 1               
00004Cr 1               ;; PRG CODE END
00004Cr 1               
00004Cr 1               
00004Cr 1               
00004Cr 1               ;; INTERRUPT HANDLER FUNCTION ADDRESSES START
00004Cr 1               .segment "VECTOR"
000000r 1  rr rr        	.addr nmi
000002r 1  rr rr        	.addr reset
000004r 1  rr rr        	.addr irq
000006r 1               ;; INTERRUPT HANDLER FUNCTION ADDRESSES END
000006r 1               
